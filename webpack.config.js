const path = require('path');
const CopyPlugin = require("copy-webpack-plugin")

const isProduction = process.env.NODE_ENV == 'production';

const config = {
    entry: {
        themis: './src/index.js',
    },
    output: {
        path: path.resolve(__dirname, 'public/jss'),
        filename: 'main.js',
        libraryTarget: "var",
        library: "themis",
    },
    // WasmThemis code is generated by Emscripten to be universal.
    // It includes some references to Node.js modules for Node.js support,
    // but they are not accessible (and not used) in web browsers.
    resolve: {
        fallback: {
            crypto: false,
            fs: false,
            http: false,
            https: false,
            net: false,
            path: false,
            stream: false,
            tls: false,
            util: false,
            url: false,
            zlib: false,
        }
    },
    externals: {
        "bufferutil": "bufferutil",
        "utf-8-validate": "utf-8-validate",
    },
    // Bundle libthemis.wasm with the script.
    // Compute SRI hash sum of the script and inject it into HTML.
    plugins: [
        new CopyPlugin({
            patterns: [
                { from: 'node_modules/wasm-themis/src/libthemis.wasm',
                    to: path.resolve(__dirname, 'public/jss'),
                },
            ],
        }),
    ],
    // libthemis.wasm and it's JS bundle is over 1 megabyte.
    // It's okay. Please be quiet, webpack.
    performance: {
        maxAssetSize: 2000000,
        maxEntrypointSize: 2000000,
    },
    module: {
        rules: [
            {
                test: /\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$/i,
                type: 'asset',
            },

            // Add your rules for custom modules here
            // Learn more about loaders from https://webpack.js.org/loaders/
        ],
    },
};

module.exports = () => {
    if (isProduction) {
        config.mode = 'production';

    } else {
        config.mode = 'development';
    }
    return config;
};
